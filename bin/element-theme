#!/usr/bin/env node

var program = require('commander')
var main = require('../index.js')
var check = require('../lib/extract-files').check
var varFile = require('../lib/config').varFile
var config = {}

console.log()
process.on('exit', function () {
  console.log()
})

const extractConfig = {
  all: false, // 提取所有主题文件
  source: null, // 要提取的源文件的相对路径
  targetDirectory: null, // 提取到...
  sourceDir: null // 批量提取指定子目录下的所有文件
}

program
  .version(require('../package.json').version)
  .option('-i --init', 'init variables file', function () {extractConfig.source = varFile})
  .option('-e --extract [sourcePath]', 'extract source file(s)', function (source) {extractConfig.source = source})
  .option('-a --extractAll [sourceDir]', 'extract all source files')
  .option('-t --targetDirectory <target>', 'set target directory', function (target) {extractConfig.targetDirectory = target})
  .option('-w --watch', 'watch variable changes then build')
  .option('-o --out [outPath]', 'output path', function (out) {config.out = out})
  .option('-m --minimize', 'compressed file', function (minimize) {config.minimize = minimize !== false})
  .option('-c --config [filePath]', 'modified files to be compiled', function (c) {config.config = c})
  .option('-b --browsers <items>', 'set browsers', function (browsers) {config.browsers = browsers.split(',')})
  .parse(process.argv)

check()

if (program.init || program.extract) {
  if (program.extractAll) {
    extractConfig.all = true;
    extractConfig.sourceDir = typeof program.extractAll === 'string' ? program.extractAll : null;
  }
  return main.extract(extractConfig);
} else if (program.extractAll || program.targetDirectory) {
  return console.log('please use \'-a\' or \'-t\' with \'-e --extract [sourcePath]\'');
}

program.watch ? main.watch(config) : main.run(config)
